# -*- coding: utf-8 -*-
"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫ –ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—É.
"""
import asyncio
import logging
import datetime
import json
from typing import Dict, List, Optional, Union, Any

from telegram import (
    Update, 
    InlineKeyboardButton, 
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    CallbackQuery
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    ContextTypes,
    filters
)

from config import (
    BOT_TOKEN, 
    SERVICES, 
    MASTER_TELEGRAM_ID, 
    APPOINTMENT_STATUSES,
    BARBERSHOP_ADDRESS
)
from database import (
    create_tables, 
    add_user, 
    get_user, 
    get_user_appointments,
    create_appointment, 
    get_appointment_by_id,
    get_appointment_with_user,
    update_appointment_status,
    cancel_appointment
)
from services import (
    calculate_total_duration, 
    validate_services,
    get_available_slots, 
    format_time_slot, 
    format_appointment_info,
    is_valid_date
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(
    MAIN_MENU,
    SELECTING_SERVICES,
    SELECTING_DATE,
    SELECTING_TIME,
    CONFIRMING_APPOINTMENT,
    VIEWING_APPOINTMENTS,
    ADMIN_MENU,
) = range(7)

# Callback –¥–∞–Ω–Ω—ã–µ –¥–ª—è InlineKeyboardButton
CALLBACK_SERVICES_PREFIX = "service:"
CALLBACK_DATE_PREFIX = "date:"
CALLBACK_TIME_PREFIX = "time:"
CALLBACK_APPOINTMENT_PREFIX = "appointment:"
CALLBACK_CONFIRM_PREFIX = "confirm:"
CALLBACK_CANCEL_PREFIX = "cancel:"
CALLBACK_ADMIN_CONFIRM = "admin_confirm:"
CALLBACK_ADMIN_CANCEL = "admin_cancel:"
CALLBACK_ADMIN_LIST = "admin_list:"
CALLBACK_ADMIN_DATE = "admin_date:"
CALLBACK_ADMIN_STATUS = "admin_status:"

# –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å–µ—Å—Å–∏–∏
user_data_dict = {}


def get_user_data(user_id: int) -> Dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å–µ—Å—Å–∏–∏.
    
    Args:
        user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        
    Returns:
        Dict: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_id not in user_data_dict:
        user_data_dict[user_id] = {
            "selected_services": [],
            "selected_date": None,
            "selected_time": None,
        }
    return user_data_dict[user_id]


def clear_user_data(user_id: int) -> None:
    """
    –û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å–µ—Å—Å–∏–∏.
    
    Args:
        user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
    """
    if user_id in user_data_dict:
        user_data_dict[user_id] = {
            "selected_services": [],
            "selected_date": None,
            "selected_time": None,
        }


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def get_main_menu_keyboard(is_admin: bool = False) -> ReplyKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.
    
    Args:
        is_admin (bool): –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        
    Returns:
        ReplyKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π
    """
    keyboard = [
        ["‚úÖ –°—Ç–∞—Ä—Ç"],
        ["–í—ã–±—Ä–∞—Ç—å —É—Å–ª—É–≥—É"],
        ["–ú–æ–∏ –∑–∞–ø–∏—Å–∏"]
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if is_admin:
        keyboard.append(["üë®‚Äçüíº –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"])
    
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


def get_services_keyboard(selected_services: List[str]) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥.
    
    Args:
        selected_services (List[str]): –°–ø–∏—Å–æ–∫ —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥
        
    Returns:
        InlineKeyboardMarkup: –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —É—Å–ª—É–≥–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–æ–π "–ì–æ—Ç–æ–≤–æ"
    """
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ 2 —É—Å–ª—É–≥–∏ –≤ —Ä—è–¥
    services_list = list(SERVICES.keys())
    for i in range(0, len(services_list), 2):
        row = []
        for service_name in services_list[i:i+2]:
            # –û—Ç–º–µ—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏
            prefix = "‚úÖ " if service_name in selected_services else ""
            row.append(InlineKeyboardButton(
                f"{prefix}{service_name} ({SERVICES[service_name]} –º–∏–Ω)",
                callback_data=f"{CALLBACK_SERVICES_PREFIX}{service_name}"
            ))
        keyboard.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ", –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —É—Å–ª—É–≥–∞
    if selected_services:
        total_duration = calculate_total_duration(selected_services)
        keyboard.append([
            InlineKeyboardButton(
                f"–ì–æ—Ç–æ–≤–æ (–≤—Å–µ–≥–æ {total_duration} –º–∏–Ω)",
                callback_data="services_done"
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞"
    keyboard.append([
        InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")
    ])
    
    return InlineKeyboardMarkup(keyboard)


def get_date_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã.
    
    Returns:
        InlineKeyboardMarkup: –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–∞—Ç–∞–º–∏ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π
    """
    keyboard = []
    today = datetime.date.today()
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –¥–∞—Ç–∞–º–∏ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π
    for i in range(7):
        date = today + datetime.timedelta(days=i)
        date_str = date.strftime("%d.%m.%Y")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
        weekday_names = [
            "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", 
            "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
        ]
        weekday = weekday_names[date.weekday()]
        
        # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è, –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É
        if i == 0:
            button_text = f"–°–µ–≥–æ–¥–Ω—è, {date_str} ({weekday})"
        elif i == 1:
            button_text = f"–ó–∞–≤—Ç—Ä–∞, {date_str} ({weekday})"
        else:
            button_text = f"{date_str} ({weekday})"
        
        keyboard.append([
            InlineKeyboardButton(
                button_text, 
                callback_data=f"{CALLBACK_DATE_PREFIX}{date.isoformat()}"
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞"
    keyboard.append([
        InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")
    ])
    
    return InlineKeyboardMarkup(keyboard)


def get_time_keyboard(
    date: datetime.date, 
    duration_minutes: int
) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏.
    
    Args:
        date (datetime.date): –í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞
        duration_minutes (int): –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥ –≤ –º–∏–Ω—É—Ç–∞—Ö
        
    Returns:
        InlineKeyboardMarkup: –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã
    available_slots = get_available_slots(date, duration_minutes)
    
    keyboard = []
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
    if not available_slots:
        keyboard.append([
            InlineKeyboardButton(
                "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É", 
                callback_data="no_slots"
            )
        ])
    else:
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 3 —Å–ª–æ—Ç–∞ –≤ —Ä—è–¥—É
        for i in range(0, len(available_slots), 3):
            row = []
            for slot in available_slots[i:i+3]:
                time_str = format_time_slot(slot)
                row.append(InlineKeyboardButton(
                    time_str,
                    callback_data=f"{CALLBACK_TIME_PREFIX}{slot.isoformat()}"
                ))
            keyboard.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.append([
        InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã", callback_data="back_to_date")
    ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞"
    keyboard.append([
        InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")
    ])
    
    return InlineKeyboardMarkup(keyboard)


def get_confirm_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏.
    
    Returns:
        InlineKeyboardMarkup: –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –æ—Ç–º–µ–Ω—ã
    """
    keyboard = [
        [
            InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="confirm_appointment")
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏", callback_data="back_to_time")
        ],
        [
            InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)


def get_appointments_keyboard(appointments: List[Any]) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π.
    
    Args:
        appointments (List): –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        InlineKeyboardMarkup: –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∑–∞–ø–∏—Å—è–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
    """
    keyboard = []
    
    if not appointments:
        keyboard.append([
            InlineKeyboardButton("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π", callback_data="no_appointments")
        ])
    else:
        for appointment in appointments:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏
            start_time = appointment.start_time
            date_str = start_time.strftime("%d.%m.%Y")
            time_str = start_time.strftime("%H:%M")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            if appointment.status == "PENDING":
                status_emoji = "‚è≥"
            elif appointment.status == "CONFIRMED":
                status_emoji = "‚úÖ"
            else:
                status_emoji = "‚ùå"
                
            button_text = f"{status_emoji} {date_str} {time_str} ({appointment.status_text})"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–ø–∏—Å–∏
            keyboard.append([
                InlineKeyboardButton(
                    button_text,
                    callback_data=f"{CALLBACK_APPOINTMENT_PREFIX}{appointment.id}"
                )
            ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    keyboard.append([
        InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    ])
    
    return InlineKeyboardMarkup(keyboard)


def get_appointment_actions_keyboard(appointment_id: int, status: str) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å—å—é.
    
    Args:
        appointment_id (int): ID –∑–∞–ø–∏—Å–∏
        status (str): –°—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏
        
    Returns:
        InlineKeyboardMarkup: –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    """
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
    if status != "CANCELLED":
        keyboard.append([
            InlineKeyboardButton(
                "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å",
                callback_data=f"{CALLBACK_CANCEL_PREFIX}{appointment_id}"
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Å–µ–π"
    keyboard.append([
        InlineKeyboardButton(
            "–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Å–µ–π",
            callback_data="back_to_appointments"
        )
    ])
    
    return InlineKeyboardMarkup(keyboard)


def get_admin_menu_keyboard() -> ReplyKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞.
    
    Returns:
        ReplyKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
    """
    keyboard = [
        ["üë• –í—Å–µ –∑–∞–ø–∏—Å–∏", "üìÖ –ó–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"],
        ["‚è© –ó–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"],
        ["üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


def get_admin_list_keyboard(appointments: List[Any]) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    
    Args:
        appointments (List): –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π
        
    Returns:
        InlineKeyboardMarkup: –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∑–∞–ø–∏—Å—è–º–∏
    """
    keyboard = []
    
    if not appointments:
        keyboard.append([
            InlineKeyboardButton("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π", callback_data="no_admin_appointments")
        ])
    else:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (—Å–Ω–∞—á–∞–ª–∞ –±–ª–∏–∂–∞–π—à–∏–µ)
        appointments = sorted(appointments, key=lambda x: x.start_time)
        
        for appointment in appointments:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏
            start_time = appointment.start_time
            date_str = start_time.strftime("%d.%m.%Y")
            time_str = start_time.strftime("%H:%M")
            client_name = appointment.user.name if appointment.user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞
            if appointment.status == "PENDING":
                status_emoji = "‚è≥"
            elif appointment.status == "CONFIRMED":
                status_emoji = "‚úÖ"
            else:
                status_emoji = "‚ùå"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–∞—Ö
            services_count = len(appointment.services_list)
            duration = appointment.duration_minutes
            
            button_text = f"{status_emoji} {date_str} {time_str} - {client_name} ({services_count} —É—Å–ª., {duration} –º–∏–Ω)"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–ø–∏—Å–∏
            keyboard.append([
                InlineKeyboardButton(
                    button_text,
                    callback_data=f"{CALLBACK_ADMIN_LIST}{appointment.id}"
                )
            ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard.append([
        InlineKeyboardButton("üîç –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="admin_refresh_list")
    ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append([
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="back_to_admin_menu")
    ])
    
    return InlineKeyboardMarkup(keyboard)


def get_admin_appointment_actions_keyboard(appointment_id: int, status: str) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å—å—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
    
    Args:
        appointment_id (int): ID –∑–∞–ø–∏—Å–∏
        status (str): –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏
        
    Returns:
        InlineKeyboardMarkup: –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    """
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    if status == "PENDING":
        keyboard.append([
            InlineKeyboardButton(
                "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å", 
                callback_data=f"{CALLBACK_ADMIN_CONFIRM}{appointment_id}"
            )
        ])
        keyboard.append([
            InlineKeyboardButton(
                "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", 
                callback_data=f"{CALLBACK_ADMIN_CANCEL}{appointment_id}"
            )
        ])
    elif status == "CONFIRMED":
        keyboard.append([
            InlineKeyboardButton(
                "‚è≥ –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞ '–û–∂–∏–¥–∞–µ—Ç'", 
                callback_data=f"{CALLBACK_ADMIN_STATUS}PENDING:{appointment_id}"
            )
        ])
        keyboard.append([
            InlineKeyboardButton(
                "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", 
                callback_data=f"{CALLBACK_ADMIN_CANCEL}{appointment_id}"
            )
        ])
    elif status == "CANCELLED":
        keyboard.append([
            InlineKeyboardButton(
                "‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", 
                callback_data=f"{CALLBACK_ADMIN_CONFIRM}{appointment_id}"
            )
        ])
        keyboard.append([
            InlineKeyboardButton(
                "‚è≥ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–∫ '–û–∂–∏–¥–∞–µ—Ç'", 
                callback_data=f"{CALLBACK_ADMIN_STATUS}PENDING:{appointment_id}"
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–≤—è–∑–∏ —Å –∫–ª–∏–µ–Ω—Ç–æ–º
    keyboard.append([
        InlineKeyboardButton(
            "üì± –ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É", 
            callback_data=f"admin_message_client:{appointment_id}"
        )
    ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append([
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_admin_list")
    ])
    
    return InlineKeyboardMarkup(keyboard)


def get_admin_confirmation_keyboard(appointment_id: int) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
    
    Args:
        appointment_id (int): ID –∑–∞–ø–∏—Å–∏
        
    Returns:
        InlineKeyboardMarkup: –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –æ—Ç–º–µ–Ω—ã
    """
    keyboard = [
        [
            InlineKeyboardButton(
                "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", 
                callback_data=f"{CALLBACK_ADMIN_CONFIRM}{appointment_id}"
            )
        ],
        [
            InlineKeyboardButton(
                "–û—Ç–º–µ–Ω–∏—Ç—å", 
                callback_data=f"{CALLBACK_ADMIN_CANCEL}{appointment_id}"
            )
        ]
    ]
    return InlineKeyboardMarkup(keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    
    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç
        
    Returns:
        int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    """
    user = update.effective_user
    user_id = user.id
    is_admin = str(user_id) == MASTER_TELEGRAM_ID
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
    add_user(str(user_id), user.full_name)
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å–µ—Å—Å–∏–∏
    clear_user_data(user_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await update.message.reply_text(
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}!\n\n"
        "–≠—Ç–æ –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫ –ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—É.\n"
        f"–ù–∞—à –∞–¥—Ä–µ—Å: {BARBERSHOP_ADDRESS}\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —É—Å–ª—É–≥–∏ –∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏.",
        reply_markup=get_main_menu_keyboard(is_admin)
    )
    
    return MAIN_MENU


async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.
    
    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç
        
    Returns:
        int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    """
    user_id = update.effective_user.id
    message_text = update.message.text
    is_admin = str(user_id) == MASTER_TELEGRAM_ID
    
    if message_text == "üë®‚Äçüíº –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å" and is_admin:
        await update.message.reply_text(
            "–í—ã –≤–æ—à–ª–∏ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=get_admin_menu_keyboard()
        )
        return ADMIN_MENU
    
    elif message_text == "‚úÖ –°—Ç–∞—Ä—Ç":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await update.message.reply_text(
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {update.effective_user.first_name}!\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫ –ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—É.\n"
            f"–ù–∞—à –∞–¥—Ä–µ—Å: {BARBERSHOP_ADDRESS}\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —É—Å–ª—É–≥–∏ –∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏.",
            reply_markup=get_main_menu_keyboard(is_admin)
        )
        return MAIN_MENU
    
    elif message_text == "–í—ã–±—Ä–∞—Ç—å —É—Å–ª—É–≥—É":
        # –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏
        user_data = get_user_data(user_id)
        user_data["selected_services"] = []
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥–∏:",
            reply_markup=get_services_keyboard([])
        )
        return SELECTING_SERVICES
    
    elif message_text == "–ú–æ–∏ –∑–∞–ø–∏—Å–∏":
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        appointments = get_user_appointments(str(user_id))
        
        if not appointments:
            await update.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.",
                reply_markup=get_main_menu_keyboard(is_admin)
            )
            return MAIN_MENU
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π
        await update.message.reply_text(
            "–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:",
            reply_markup=get_appointments_keyboard(appointments)
        )
        return VIEWING_APPOINTMENTS
    
    else:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu_keyboard(is_admin)
        )
        return MAIN_MENU


async def select_services(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥.
    
    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç
        
    Returns:
        int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    """
    query = update.callback_query
    user_id = update.effective_user.id
    user_data = get_user_data(user_id)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏
    if query.data.startswith(CALLBACK_SERVICES_PREFIX):
        service_name = query.data[len(CALLBACK_SERVICES_PREFIX):]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ —É–¥–∞–ª—è–µ–º —É—Å–ª—É–≥—É –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
        if service_name in user_data["selected_services"]:
            user_data["selected_services"].remove(service_name)
        else:
            user_data["selected_services"].append(service_name)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —É—Å–ª—É–≥–∞–º–∏
        await query.edit_message_reply_markup(
            reply_markup=get_services_keyboard(user_data["selected_services"])
        )
        return SELECTING_SERVICES
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ì–æ—Ç–æ–≤–æ"
    elif query.data == "services_done":
        selected_services = user_data["selected_services"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–∞ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —É—Å–ª—É–≥–∞
        if not selected_services:
            await query.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —É—Å–ª—É–≥—É!")
            return SELECTING_SERVICES
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã
        await query.edit_message_text(
            f"–í—ã–±—Ä–∞–Ω–æ —É—Å–ª—É–≥: {len(selected_services)}\n"
            f"–û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {calculate_total_duration(selected_services)} –º–∏–Ω—É—Ç\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
            reply_markup=get_date_keyboard()
        )
        return SELECTING_DATE
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
    elif query.data == "cancel":
        await query.edit_message_text(
            "–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=None
        )
        return MAIN_MENU
    
    return SELECTING_SERVICES


async def select_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã.
    
    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç
        
    Returns:
        int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    """
    query = update.callback_query
    user_id = update.effective_user.id
    user_data = get_user_data(user_id)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
    if query.data.startswith(CALLBACK_DATE_PREFIX):
        date_str = query.data[len(CALLBACK_DATE_PREFIX):]
        selected_date = datetime.date.fromisoformat(date_str)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
        if not is_valid_date(selected_date):
            await query.answer("–í—ã–±—Ä–∞–Ω–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞—è –¥–∞—Ç–∞!")
            return SELECTING_DATE
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
        user_data["selected_date"] = selected_date
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥
        duration = calculate_total_duration(user_data["selected_services"])
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏
        await query.edit_message_text(
            f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {selected_date.strftime('%d.%m.%Y')}\n"
            f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥: {duration} –º–∏–Ω—É—Ç\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:",
            reply_markup=get_time_keyboard(selected_date, duration)
        )
        return SELECTING_TIME
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
    elif query.data == "cancel":
        await query.edit_message_text(
            "–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=None
        )
        return MAIN_MENU
    
    return SELECTING_DATE


async def select_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏.
    
    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç
        
    Returns:
        int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    """
    query = update.callback_query
    user_id = update.effective_user.id
    user_data = get_user_data(user_id)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
    if query.data.startswith(CALLBACK_TIME_PREFIX):
        time_str = query.data[len(CALLBACK_TIME_PREFIX):]
        selected_time = datetime.datetime.fromisoformat(time_str)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        user_data["selected_time"] = selected_time
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
        duration = calculate_total_duration(user_data["selected_services"])
        end_time = selected_time + datetime.timedelta(minutes=duration)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏
        appointment_info = format_appointment_info(
            user_data["selected_services"],
            selected_time,
            end_time
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –∑–∞–ø–∏—Å–∏
        await query.edit_message_text(
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å:\n\n{appointment_info}",
            reply_markup=get_confirm_keyboard()
        )
        return CONFIRMING_APPOINTMENT
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã"
    elif query.data == "back_to_date":
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
            reply_markup=get_date_keyboard()
        )
        return SELECTING_DATE
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
    elif query.data == "no_slots":
        await query.answer("–ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.")
        return SELECTING_TIME
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
    elif query.data == "cancel":
        await query.edit_message_text(
            "–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=None
        )
        return MAIN_MENU
    
    return SELECTING_TIME


async def confirm_appointment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏.
    
    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç
        
    Returns:
        int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    """
    query = update.callback_query
    user_id = update.effective_user.id
    user_data = get_user_data(user_id)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
    if query.data == "confirm_appointment":
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
        selected_services = user_data["selected_services"]
        selected_time = user_data["selected_time"]
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
        duration = calculate_total_duration(selected_services)
        end_time = selected_time + datetime.timedelta(minutes=duration)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        appointment_id = create_appointment(
            str(user_id),
            selected_services,
            selected_time,
            end_time
        )
        
        if appointment_id:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await query.edit_message_text(
                "–í–∞—à–∞ –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞.\n"
                "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –º–∞—Å—Ç–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç –∑–∞–ø–∏—Å—å.",
                reply_markup=None
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏ –≤–º–µ—Å—Ç–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–∞—Å—Ç–µ—Ä—É
            appointment_data = get_appointment_with_user(appointment_id)
            
            if appointment_data:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä—É
                try:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏
                    appointment_info = format_appointment_info(
                        appointment_data['services_list'],
                        appointment_data['start_time'],
                        appointment_data['end_time']
                    )
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–ª–∏–µ–Ω—Ç–µ
                    client_name = appointment_data['user']['name']
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä—É
                    await context.bot.send_message(
                        chat_id=MASTER_TELEGRAM_ID,
                        text=(
                            f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–ø–∏—Å—å!\n\n"
                            f"–ö–ª–∏–µ–Ω—Ç: {client_name}\n\n"
                            f"{appointment_info}"
                        ),
                        reply_markup=get_admin_confirmation_keyboard(appointment_id)
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä—É: {e}")
        else:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏
            await query.edit_message_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=None
            )
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å–µ—Å—Å–∏–∏
        clear_user_data(user_id)
        
        return MAIN_MENU
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏"
    elif query.data == "back_to_time":
        selected_date = user_data["selected_date"]
        duration = calculate_total_duration(user_data["selected_services"])
        
        await query.edit_message_text(
            f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {selected_date.strftime('%d.%m.%Y')}\n"
            f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥: {duration} –º–∏–Ω—É—Ç\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:",
            reply_markup=get_time_keyboard(selected_date, duration)
        )
        return SELECTING_TIME
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
    elif query.data == "cancel":
        await query.edit_message_text(
            "–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=None
        )
        return MAIN_MENU
    
    return CONFIRMING_APPOINTMENT


async def view_appointments(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π.
    
    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç
        
    Returns:
        int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    """
    query = update.callback_query
    user_id = update.effective_user.id
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏
    if query.data.startswith(CALLBACK_APPOINTMENT_PREFIX):
        appointment_id = int(query.data[len(CALLBACK_APPOINTMENT_PREFIX):])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏
        appointment = get_appointment_by_id(appointment_id)
        
        if appointment:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏
            appointment_info = format_appointment_info(
                appointment.services_list,
                appointment.start_time,
                appointment.end_time
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            status_text = appointment.status_text
            
            await query.edit_message_text(
                f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø–∏—Å–∏:\n\n{appointment_info}\n\n"
                f"–°—Ç–∞—Ç—É—Å: {status_text}",
                reply_markup=get_appointment_actions_keyboard(appointment_id, appointment.status)
            )
        else:
            await query.edit_message_text(
                "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.",
                reply_markup=None
            )
        
        return VIEWING_APPOINTMENTS
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏
    elif query.data.startswith(CALLBACK_CANCEL_PREFIX):
        appointment_id = int(query.data[len(CALLBACK_CANCEL_PREFIX):])
        
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø–∏—Å—å
        if cancel_appointment(appointment_id):
            await query.edit_message_text(
                "–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                reply_markup=None
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏ –≤–º–µ—Å—Ç–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–∞—Å—Ç–µ—Ä—É
            appointment_data = get_appointment_with_user(appointment_id)
            
            if appointment_data:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä—É –æ–± –æ—Ç–º–µ–Ω–µ
                try:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏
                    appointment_info = format_appointment_info(
                        appointment_data['services_list'],
                        appointment_data['start_time'],
                        appointment_data['end_time']
                    )
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–ª–∏–µ–Ω—Ç–µ
                    client_name = appointment_data['user']['name']
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä—É
                    await context.bot.send_message(
                        chat_id=MASTER_TELEGRAM_ID,
                        text=(
                            f"–ö–ª–∏–µ–Ω—Ç –æ—Ç–º–µ–Ω–∏–ª –∑–∞–ø–∏—Å—å!\n\n"
                            f"–ö–ª–∏–µ–Ω—Ç: {client_name}\n\n"
                            f"{appointment_info}"
                        )
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä—É: {e}")
        else:
            await query.edit_message_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=None
            )
        
        return MAIN_MENU
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Å–µ–π"
    elif query.data == "back_to_appointments":
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        appointments = get_user_appointments(str(user_id))
        
        await query.edit_message_text(
            "–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:",
            reply_markup=get_appointments_keyboard(appointments)
        )
        return VIEWING_APPOINTMENTS
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    elif query.data == "back_to_main":
        await query.edit_message_text(
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=None
        )
        return MAIN_MENU
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π
    elif query.data == "no_appointments":
        await query.edit_message_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.",
            reply_markup=None
        )
        return MAIN_MENU
    
    return VIEWING_APPOINTMENTS


async def admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é.
    
    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç
        
    Returns:
        int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    """
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if str(user_id) != MASTER_TELEGRAM_ID:
        await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!",
            reply_markup=get_main_menu_keyboard(False)
        )
        return MAIN_MENU
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = update.message.text
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞
    if message_text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await update.message.reply_text(
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞.",
            reply_markup=get_main_menu_keyboard(True)
        )
        return MAIN_MENU
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    elif message_text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å":
        await update.message.reply_text(
            "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.",
            reply_markup=get_admin_menu_keyboard()
        )
        return ADMIN_MENU
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    elif message_text == "üìÖ –ó–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è":
        date = datetime.date.today()
        title = "üìÖ –ó–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"
    elif message_text == "‚è© –ó–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞":
        date = datetime.date.today() + datetime.timedelta(days=1)
        title = "‚è© –ó–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"
    elif message_text == "üë• –í—Å–µ –∑–∞–ø–∏—Å–∏":
        date = None
        title = "üë• –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏"
    else:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
            reply_markup=get_admin_menu_keyboard()
        )
        return ADMIN_MENU
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏
    from database import get_all_appointments, get_appointments_for_date
    
    if date:
        appointments = get_appointments_for_date(date)
    else:
        appointments = get_all_appointments()
    
    if not appointments:
        await update.message.reply_text(
            f"{title}:\n\n–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.",
            reply_markup=get_admin_menu_keyboard()
        )
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π
        await update.message.reply_text(
            f"{title} ({len(appointments)}):",
            reply_markup=get_admin_list_keyboard(appointments)
        )
    
    return ADMIN_MENU


async def admin_status_change(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø–∏—Å–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
    
    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç
        
    Returns:
        int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    """
    query = update.callback_query
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if str(user_id) != MASTER_TELEGRAM_ID:
        await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return MAIN_MENU
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    # –§–æ—Ä–º–∞—Ç: "admin_status:–ù–û–í–´–ô_–°–¢–ê–¢–£–°:ID_–ó–ê–ü–ò–°–ò"
    if query.data.startswith(CALLBACK_ADMIN_STATUS):
        data_parts = query.data[len(CALLBACK_ADMIN_STATUS):].split(":")
        if len(data_parts) == 2:
            new_status, appointment_id = data_parts
            appointment_id = int(appointment_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏
            if update_appointment_status(appointment_id, new_status):
                status_text = APPOINTMENT_STATUSES.get(new_status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
                await query.answer(f"–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {status_text}")
                
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏
                appointment_data = get_appointment_with_user(appointment_id)
                
                if appointment_data:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏
                    appointment_info = format_appointment_info(
                        appointment_data['services_list'],
                        appointment_data['start_time'],
                        appointment_data['end_time']
                    )
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–ª–∏–µ–Ω—Ç–µ
                    client_name = appointment_data['user']['name']
                    client_telegram_id = appointment_data['user']['telegram_id']
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å —Å —ç–º–æ–¥–∑–∏
                    status = appointment_data['status']
                    if status == "PENDING":
                        status_emoji = "‚è≥"
                    elif status == "CONFIRMED":
                        status_emoji = "‚úÖ"
                    else:
                        status_emoji = "‚ùå"
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–ø–∏—Å–∏
                    await query.edit_message_text(
                        f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø–∏—Å–∏ #{appointment_data['id']}:\n\n"
                        f"üë§ –ö–ª–∏–µ–Ω—Ç: {client_name}\n"
                        f"üÜî Telegram ID: {client_telegram_id}\n\n"
                        f"{appointment_info}\n\n"
                        f"üîÑ –°—Ç–∞—Ç—É—Å: {status_emoji} {appointment_data['status_text']}",
                        reply_markup=get_admin_appointment_actions_keyboard(
                            appointment_id, 
                            status
                        )
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
                    try:
                        if new_status == "PENDING":
                            message_text = (
                                f"–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞–ø–∏—Å–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ‚è≥ {status_text}\n\n"
                                f"{appointment_info}"
                            )
                        else:
                            message_text = (
                                f"–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞–ø–∏—Å–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {status_emoji} {status_text}\n\n"
                                f"{appointment_info}"
                            )
                        
                        await context.bot.send_message(
                            chat_id=client_telegram_id,
                            text=message_text
                        )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É: {e}")
                
                return ADMIN_MENU
            else:
                await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø–∏—Å–∏!")
                return ADMIN_MENU
    
    await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
    return ADMIN_MENU


async def admin_view_appointment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
    
    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç
        
    Returns:
        int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    """
    query = update.callback_query
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if str(user_id) != MASTER_TELEGRAM_ID:
        await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return MAIN_MENU
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏
    if query.data.startswith(CALLBACK_ADMIN_LIST):
        appointment_id = int(query.data[len(CALLBACK_ADMIN_LIST):])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏
        appointment_data = get_appointment_with_user(appointment_id)
        
        if appointment_data:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏
            appointment_info = format_appointment_info(
                appointment_data['services_list'],
                appointment_data['start_time'],
                appointment_data['end_time']
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–ª–∏–µ–Ω—Ç–µ
            client_name = appointment_data['user']['name']
            client_telegram_id = appointment_data['user']['telegram_id']
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å —Å —ç–º–æ–¥–∑–∏
            status = appointment_data['status']
            if status == "PENDING":
                status_emoji = "‚è≥"
            elif status == "CONFIRMED":
                status_emoji = "‚úÖ"
            else:
                status_emoji = "‚ùå"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏
            await query.edit_message_text(
                f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø–∏—Å–∏ #{appointment_data['id']}:\n\n"
                f"üë§ –ö–ª–∏–µ–Ω—Ç: {client_name}\n"
                f"üÜî Telegram ID: {client_telegram_id}\n\n"
                f"{appointment_info}\n\n"
                f"üîÑ –°—Ç–∞—Ç—É—Å: {status_emoji} {appointment_data['status_text']}",
                reply_markup=get_admin_appointment_actions_keyboard(
                    appointment_id, 
                    status
                )
            )
        else:
            await query.edit_message_text(
                "‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_admin_list")
                ]])
            )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π
    elif query.data == "admin_refresh_list":
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
        from database import get_all_appointments
        appointments = get_all_appointments()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π
        await query.edit_message_text(
            f"üë• –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏ ({len(appointments)}):",
            reply_markup=get_admin_list_keyboard(appointments)
        )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Å–µ–π
    elif query.data == "back_to_admin_list":
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
        from database import get_all_appointments
        appointments = get_all_appointments()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π
        await query.edit_message_text(
            f"üë• –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏ ({len(appointments)}):",
            reply_markup=get_admin_list_keyboard(appointments)
        )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é
    elif query.data == "back_to_admin_menu":
        await query.edit_message_text(
            "üîô –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=None
        )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è —Å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ–º –∑–∞–ø–∏—Å–µ–π
    elif query.data == "no_admin_appointments":
        await query.answer("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
    
    return ADMIN_MENU


async def admin_confirm_appointment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
    
    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç
        
    Returns:
        int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    """
    query = update.callback_query
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if str(user_id) != MASTER_TELEGRAM_ID:
        await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return MAIN_MENU
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
    if query.data.startswith(CALLBACK_ADMIN_CONFIRM):
        appointment_id = int(query.data[len(CALLBACK_ADMIN_CONFIRM):])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏
        if update_appointment_status(appointment_id, "CONFIRMED"):
            await query.edit_message_text(
                "–ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.",
                reply_markup=None
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç—É
            appointment_data = get_appointment_with_user(appointment_id)
            
            if appointment_data:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
                try:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏
                    appointment_info = format_appointment_info(
                        appointment_data['services_list'],
                        appointment_data['start_time'],
                        appointment_data['end_time']
                    )
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–ª–∏–µ–Ω—Ç–µ
                    client_telegram_id = appointment_data['user']['telegram_id']
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
                    await context.bot.send_message(
                        chat_id=client_telegram_id,
                        text=(
                            f"–í–∞—à–∞ –∑–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –º–∞—Å—Ç–µ—Ä–æ–º!\n\n"
                            f"{appointment_info}\n\n"
                            f"–ñ–¥–µ–º –≤–∞—Å –ø–æ –∞–¥—Ä–µ—Å—É: {BARBERSHOP_ADDRESS}"
                        )
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É: {e}")
        else:
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏!")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    elif query.data.startswith(CALLBACK_ADMIN_CANCEL):
        appointment_id = int(query.data[len(CALLBACK_ADMIN_CANCEL):])
        
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø–∏—Å—å
        if cancel_appointment(appointment_id):
            await query.edit_message_text(
                "‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Å–µ–π", callback_data="back_to_admin_list")
                ]])
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç—É
            appointment_data = get_appointment_with_user(appointment_id)
            
            if appointment_data:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
                try:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏
                    appointment_info = format_appointment_info(
                        appointment_data['services_list'],
                        appointment_data['start_time'],
                        appointment_data['end_time']
                    )
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–ª–∏–µ–Ω—Ç–µ
                    client_telegram_id = appointment_data['user']['telegram_id']
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
                    await context.bot.send_message(
                        chat_id=client_telegram_id,
                        text=(
                            f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞–ø–∏—Å—å –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –º–∞—Å—Ç–µ—Ä–æ–º.\n\n"
                            f"{appointment_info}\n\n"
                            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–∞—Å—Ç–µ—Ä–æ–º."
                        )
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É: {e}")
        else:
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏!")


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞.
    
    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç
        
    Returns:
        int: MAIN_MENU - –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    """
    user_id = update.effective_user.id
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å–µ—Å—Å–∏–∏
    clear_user_data(user_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if update.message:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if str(user_id) == MASTER_TELEGRAM_ID:
            await update.message.reply_text(
                "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                reply_markup=get_main_menu_keyboard(True)
            )
            return MAIN_MENU
        else:
            await update.message.reply_text(
                "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                reply_markup=get_main_menu_keyboard(False)
            )
            return MAIN_MENU
    elif update.callback_query:
        await update.callback_query.edit_message_text(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=None
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if str(user_id) == MASTER_TELEGRAM_ID:
            return ADMIN_MENU
        else:
            return MAIN_MENU


def main() -> None:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.
    """
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    create_tables()
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            MAIN_MENU: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, main_menu)
            ],
            ADMIN_MENU: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, admin_menu),
                CallbackQueryHandler(admin_view_appointment, pattern=f"^({CALLBACK_ADMIN_LIST}|back_to_admin_list|back_to_admin_menu|admin_refresh_list|no_admin_appointments).*$"),
                CallbackQueryHandler(admin_confirm_appointment, pattern=f"^({CALLBACK_ADMIN_CONFIRM}|{CALLBACK_ADMIN_CANCEL}).*$"),
                CallbackQueryHandler(admin_status_change, pattern=f"^{CALLBACK_ADMIN_STATUS}.*$"),
            ],
            SELECTING_SERVICES: [
                CallbackQueryHandler(select_services)
            ],
            SELECTING_DATE: [
                CallbackQueryHandler(select_date)
            ],
            SELECTING_TIME: [
                CallbackQueryHandler(select_time)
            ],
            CONFIRMING_APPOINTMENT: [
                CallbackQueryHandler(confirm_appointment)
            ],
            VIEWING_APPOINTMENTS: [
                CallbackQueryHandler(view_appointments)
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(conv_handler)
    
    # –≠—Ç–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–∂–µ –≤–∫–ª—é—á–µ–Ω—ã –≤ ConversationHandler –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ADMIN_MENU
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()


if __name__ == "__main__":
    main()

